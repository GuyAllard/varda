Varda server notes
==================

These notes should probably end up in end-user and/or developer documentation.


Frequency calculations
----------------------

Sex should be taken into account when calculating frequencies on sex
chromosomes. For example, in a pool of 500 (250 females, 250 males), the
maximum frequency on the Y chromosome is 250. This is not a problem for
samples where we have coverage tracks, since we use them to calculate
frequencies (e.g. female samples won't have coverage on Y).

For population studies, where we don't have coverage tracks, we should
have the option to manually set the number of male/female samples, and take
that into account in calculations. If this ratio is unknown, things will be
harder (we might be able to deduce something from variants on X and Y). In
any case, communicate clearly what the calculation exactly is.


Todo
----

* Import data source directly from URL without uploading.
* Everything must be in UTF8.
* Use Alembic for database migrations.
* Data source hashing?
* Developer documentation using Sphinx.
* Generated REST API documentation, also using Sphinx?


Relevant links
--------------

* [Modern Web Application Architecture](http://leftnode.com/entry/modern-web-application-architecture)
* [Getting RESTful with web.py](http://johnpaulett.com/2008/09/20/getting-restful-with-webpy/)
* [Simple Flask extension for RESTful APIs](https://github.com/kennethreitz/flask-rest)
* [Example: Glpi Rest Api](https://bitbucket.org/ee_lars/gra)
* [Example: The datahub](https://github.com/okfn/datahub)
* [Example: Andalucia](https://bitbucket.org/abki/andalucia/)
* [A skeleton for Flask applications](https://github.com/sean-/flask-skeleton)
* [SQLAlchemy usage recipes](http://www.sqlalchemy.org/trac/wiki/UsageRecipes)
* [Dropbox API](https://www.dropbox.com/developers/reference/api)
* [Twitter API](https://dev.twitter.com/docs/api)
* [Amazon S3 REST API](http://docs.amazonwebservices.com/AmazonS3/latest/API/index.html?APIRest.html)
* [Designing a Secure REST (Web) API without OAuth](http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication/)
* [bitly API Documentation](http://code.google.com/p/bitly-api/wiki/ApiDocumentation)
* [Alembic Documentation](http://packages.python.org/alembic)
* [What exactly is RESTful programming?](http://news.ycombinator.com/item?id=3538585)
* [General principles for good URI design for RESTful and HTTP applications](http://news.ycombinator.com/item?id=3547369)
* [How I learned to stop worrying and love REST](http://news.ycombinator.com/item?id=3554973)
* [REST Done Right with Steve Klabnik podcast](http://rubyrogues.com/rest-done-right-with-steve-klabnik/)
