Varda, a variant database interface
===================================

Very much a work in progress, this document contains some ideas. Some are
implemented, some are todo.

Varda is implemented by very loosely coupled components, communicating using
a RESTful protocol over HTTP using json-encoded response payloads.


Varda server
------------

The server is implemented in Python using the [Flask] [1] framework and
directly interfaces the MySQL database backend using [SQLAlchemy] [2]. It
exposes a [RESTful] [3] API over HTTP where response payloads are (currently
only) json-encoded. A future version may use other encodings, depending on the
value of the Accept-Encoding header sent by the client.

Long-running actions are executed asynchonously through the [Celery] [4]
distributed task queue. For simplicity, MySQL is used as both the broker and
database backend for Celery.

Most requirements for this architecture can be installed from PyPI:

    pip install Flask-Celery Flask-Script Flask-SQLAlchemy kombu-sqlalchemy

Git clone url: https://humgenprojects.lumc.nl/git/varda-server.git


Varda command line client
-------------------------

The simple command line client can be used for administrative tasks, such as
importing very large VCF files. Communication with the server API is done
using the [Requests] [5] library.

Git clone url: https://humgenprojects.lumc.nl/git/varda-client.git


Varda web interface
-------------------

The HTML5 web interface runs completely client-side. It is built on top of
Twitter's [Bootstrap] [6] toolkit and uses [Less] [7] stylesheets. Javascript
code is compiled from [Coffeescript] [8] and will probably use at least
[jQuery] [9].

Apart from this, there could also be a simple mobile web app, for example for
use on the iPhone.

Git clone url: https://humgenprojects.lumc.nl/git/varda-web.git


Authentication
--------------

Probably use some kind of API keys, of which server-side only a hash is stored
using bcrypt.


Using virtualenv
----------------

Since this is my first time using [virtualenv] [11], I document some things
here. It is easier to work with using [virtualenvwrapper] [10].

    sudo easy_install pip
    sudo pip install virtualenv
    sudo pip install virtualenvwrapper
    mkdir ~/.virtualenvs

Add to ~/.bashrc:

    export WORKON_HOME=~/.virtualenvs
    source /usr/local/bin/virtualenvwrapper.sh
    export PIP_VIRTUALENV_BASE=$WORKON_HOME
    export PIP_REQUIRE_VIRTUALENV=true
    export PIP_RESPECT_VIRTUALENV=true

For easy development, we always want to have a IPython installed:

    echo 'pip install ipython' >> $WORKON_HOME/postmkvirtualenv

Now, create an environment:

    mkvirtualenv --no-site-packages varda-server

Activate the environment with:

    workon varda-server

To install mysql-python, we need a development package:

    sudo aptitude install python-dev libmysqlclient-dev
    pip install MySQL-python

Same for psycopg2:

    sudo aptitude install python-dev libpq-dev
    pip install psycopg2

Install all required packages at once (Python 2.6) with:

    pip install -r requirements-2.6.txt

Or (Python 2.7, may not be up-to-date):

    pip install -r requirements-2.7.txt

Update these lists with `pip freeze > requirements-2.6.txt`.

For some packages that are hard to install with PIP (database drivers, pysam,
etc), we could link to the global site packages and install these using apt.


Todo
----

* Import data source directly from URL without uploading.
* Everything must be in UTF8.
* Use Alembic for database migrations.
* Data source hashing?


And then...
-----------

Just as a reference, some relevant links:

* [Modern Web Application Architecture](http://leftnode.com/entry/modern-web-application-architecture)
* [Getting RESTful with web.py](http://johnpaulett.com/2008/09/20/getting-restful-with-webpy/)
* [Simple Flask extension for RESTful APIs](https://github.com/kennethreitz/flask-rest)
* [Example: Glpi Rest Api](https://bitbucket.org/ee_lars/gra)
* [Example: The datahub](https://github.com/okfn/datahub)
* [Example: Andalucia](https://bitbucket.org/abki/andalucia/)
* [A skeleton for Flask applications](https://github.com/sean-/flask-skeleton)
* [SQLAlchemy usage recipes](http://www.sqlalchemy.org/trac/wiki/UsageRecipes)
* [Dropbox API](https://www.dropbox.com/developers/reference/api)
* [Twitter API](https://dev.twitter.com/docs/api)
* [Amazon S3 REST API](http://docs.amazonwebservices.com/AmazonS3/latest/API/index.html?APIRest.html)
* [Designing a Secure REST (Web) API without OAuth](http://www.thebuzzmedia.com/designing-a-secure-rest-api-without-oauth-authentication/)
* [bitly API Documentation](http://code.google.com/p/bitly-api/wiki/ApiDocumentation)
* [Alembic Documentation](http://packages.python.org/alembic)


[1]: http://flask.pocoo.org/
[2]: http://www.sqlalchemy.org/
[3]: http://en.wikipedia.org/wiki/Representational_state_transfer
[4]: http://celeryproject.org/
[5]: http://python-requests.org
[6]: http://twitter.github.com/bootstrap/
[7]: http://lesscss.org/
[8]: http://jashkenas.github.com/coffee-script/
[9]: http://jquery.com/
[10]: http://www.virtualenv.org/
[11]: http://www.doughellmann.com/docs/virtualenvwrapper/
